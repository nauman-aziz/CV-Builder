{"ast":null,"code":"var _jsxFileName = \"/workspaces/CV-Builder/src/components/common/FormInput.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Description from './Description';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Alert from '@material-ui/lab/Alert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _ = require('lodash');\nconst useStyles = makeStyles(theme => ({\n  alert: {\n    padding: '0px',\n    width: '100%'\n  }\n}));\nexport default function FormInput(props) {\n  _s();\n  const classes = useStyles();\n  const [errorText, setErrorText] = React.useState({});\n  const [minSize, setMinSize] = React.useState(50);\n  const validateInput = (id, name, input) => {\n    if (name === 'gpa') {\n      if (input.length < 1) setErrorText({\n        ...errorText,\n        [id]: 'Too Small Input'\n      });else if (input.length > 5) setErrorText({\n        ...errorText,\n        [id]: 'Too Large Input'\n      });else setErrorText({\n        ...errorText,\n        [id]: ''\n      });\n    } else if (name === 'projectName') {\n      if (input.length < 3) setErrorText({\n        ...errorText,\n        [id]: 'Too Small Input'\n      });else if (input.length > 100) setErrorText({\n        ...errorText,\n        [id]: 'Too Large Input'\n      });else setErrorText({\n        ...errorText,\n        [id]: ''\n      });\n    } else if (name === 'keywords') {\n      var keywords = input.split(',');\n      setMinSize(4);\n      keywords.forEach(keyword => {\n        if (keyword.length < 4) setMinSize(keyword.length);\n      });\n      if (minSize < 4) setErrorText({\n        ...errorText,\n        [id]: 'Too Small Keyword'\n      });else setErrorText({\n        ...errorText,\n        [id]: ''\n      });\n    } else {\n      if (input.length < 3) setErrorText({\n        ...errorText,\n        [id]: 'Too Small Input'\n      });else setErrorText({\n        ...errorText,\n        [id]: ''\n      });\n    }\n  };\n  const handleChange = e => {\n    const updatedSection = [...props.section];\n    validateInput(e.target.id, e.target.name, e.target.value);\n    var keywords = e.target.value.split(',');\n    updatedSection[props.id][e.target.name] = e.target.name === 'keywords' ? keywords : e.target.value;\n    props.update(updatedSection);\n  };\n  const inputAttributes = item => {\n    const value = {\n      type: 'text',\n      shrink: false\n    };\n    if (item === 'date' || item === 'startDate' || item === 'endDate') {\n      value.type = 'date';\n      value.shrink = true;\n    }\n    return value;\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: Object.entries(props.input).map((name, idx) => {\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: name[0] === 'description' || name[0] === 'projectDescription' ? /*#__PURE__*/_jsxDEV(Description, {\n            sectionName: props.name,\n            section: props.section,\n            index: props.id,\n            name: name[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 37\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              id: name + idx,\n              name: name[0],\n              label: name[0] === 'keywords' ? _.startCase(name[0]) + ' (separated by a `,`)' : _.startCase(name[0]),\n              value: props.section[props.id][name[0]],\n              onChange: handleChange,\n              type: inputAttributes(name[0]).type,\n              InputLabelProps: {\n                shrink: inputAttributes(name[0]).type === 'date' ? true : props.section[props.id][name[0]] ? true : false\n                //color: props.section[props.id][name[0]].length < 3 ? 'primary' : 'secondary'\n              },\n              error: errorText[name + idx],\n              fullWidth: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 41\n            }, this), errorText[name + idx] ? /*#__PURE__*/_jsxDEV(Alert, {\n              className: classes.alert,\n              severity: \"error\",\n              children: errorText[name + idx]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 45\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 129\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 37\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n_s(FormInput, \"Rco/47uv+bKiNvWLpPTELjCOjts=\", false, function () {\n  return [useStyles];\n});\n_c = FormInput;\nvar _c;\n$RefreshReg$(_c, \"FormInput\");","map":{"version":3,"names":["React","Grid","TextField","Description","makeStyles","Alert","jsxDEV","_jsxDEV","_","require","useStyles","theme","alert","padding","width","FormInput","props","_s","classes","errorText","setErrorText","useState","minSize","setMinSize","validateInput","id","name","input","length","keywords","split","forEach","keyword","handleChange","e","updatedSection","section","target","value","update","inputAttributes","item","type","shrink","Fragment","children","container","spacing","Object","entries","map","idx","xs","sectionName","index","fileName","_jsxFileName","lineNumber","columnNumber","label","startCase","onChange","InputLabelProps","error","fullWidth","className","severity","_c","$RefreshReg$"],"sources":["/workspaces/CV-Builder/src/components/common/FormInput.js"],"sourcesContent":["import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Description from './Description';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Alert from '@material-ui/lab/Alert';\n\nvar _ = require('lodash');\n\nconst useStyles = makeStyles((theme) => ({\n    alert: {\n        padding: '0px',\n        width: '100%',\n    },\n}));\n\nexport default function FormInput(props) {\n    const classes = useStyles();\n\n    const [errorText, setErrorText] = React.useState({})\n\n    const [minSize, setMinSize] = React.useState(50)\n\n    const validateInput = (id, name, input) => {\n        if (name === 'gpa')\n            if (input.length < 1)\n                setErrorText({ ...errorText, [id]: 'Too Small Input' })\n            else if (input.length > 5)\n                setErrorText({ ...errorText, [id]: 'Too Large Input' })\n            else setErrorText({ ...errorText, [id]: '' })\n        else if (name === 'projectName')\n            if (input.length < 3)\n                setErrorText({ ...errorText, [id]: 'Too Small Input' })\n            else if (input.length > 100)\n                setErrorText({ ...errorText, [id]: 'Too Large Input' })\n            else setErrorText({ ...errorText, [id]: '' })\n        else if (name === 'keywords') {\n            var keywords = input.split(',');\n            setMinSize(4)\n            keywords.forEach(keyword => {\n                if (keyword.length < 4)\n                    setMinSize(keyword.length)\n            })\n            if (minSize < 4)\n                setErrorText({ ...errorText, [id]: 'Too Small Keyword' })\n            else setErrorText({ ...errorText, [id]: '' })\n        }\n        else {\n            if (input.length < 3)\n                setErrorText({ ...errorText, [id]: 'Too Small Input' })\n            else setErrorText({ ...errorText, [id]: '' })\n        }\n    }\n\n    const handleChange = (e) => {\n        const updatedSection = [...props.section];\n        validateInput(e.target.id, e.target.name, e.target.value)\n        var keywords = e.target.value.split(',');\n        updatedSection[props.id][e.target.name] = (e.target.name === 'keywords') ? keywords : e.target.value;\n        props.update(updatedSection);\n    };\n\n    const inputAttributes = (item) => {\n        const value = {\n            type: 'text',\n            shrink: false\n        }\n        if (item === 'date' || item === 'startDate' || item === 'endDate') {\n            value.type = 'date'\n            value.shrink = true\n        }\n\n        return value;\n    }\n\n    return (\n        <React.Fragment>\n            <Grid container spacing={3}>\n                {\n                    Object.entries(props.input).map((name, idx) => {\n                        return (\n                            <Grid key={idx} item xs={12}>\n                                {(name[0] === 'description' || name[0] === 'projectDescription') ?\n                                    <Description\n                                        sectionName={props.name}\n                                        section={props.section}\n                                        index={props.id}\n                                        name={name[0]}\n                                    /> :\n                                    <div>\n                                        <TextField\n                                            id={name + idx}\n                                            name={name[0]}\n                                            label={(name[0] === 'keywords') ? (_.startCase(name[0]) + ' (separated by a `,`)') : _.startCase(name[0])}\n                                            value={props.section[props.id][name[0]]}\n                                            onChange={handleChange}\n                                            type={inputAttributes(name[0]).type}\n                                            InputLabelProps={{\n                                                shrink: (inputAttributes(name[0]).type === 'date' ? true :\n                                                    props.section[props.id][name[0]] ? true : false),\n                                                //color: props.section[props.id][name[0]].length < 3 ? 'primary' : 'secondary'\n                                            }}\n                                            error={errorText[name + idx]}\n                                            fullWidth\n                                        />\n                                        {(errorText[name + idx]) ?\n                                            <Alert className={classes.alert} severity=\"error\">{errorText[name + idx]}</Alert> : <div></div>\n                                        }\n                                    </div>\n                                }\n                            </Grid>\n                        );\n                    })\n                }\n            </Grid>\n        </React.Fragment>\n    );\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}